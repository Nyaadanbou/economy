/*
 * Copyright Xanium Development (c) 2013-2018. All Rights Reserved.
 * Any code contained within this document, and any associated APIs with similar branding
 * are the sole property of Xanium Development. Distribution, reproduction, taking snippets or claiming
 * any contents as your own will break the terms of the license, and void any agreements with you, the third party.
 * Thank you.
 */

package me.xanium.gemseconomy.account;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import me.lucko.helper.profiles.OfflineModeProfiles;
import me.xanium.gemseconomy.GemsEconomy;
import me.xanium.gemseconomy.message.Action;
import me.xanium.gemseconomy.data.DataStorage;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.Collection;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

public class AccountManager {

    private final @NonNull GemsEconomy plugin;
    private final @NonNull LoadingCache<UUID, Account> accounts; // A collection of accounts loaded in memory

    public AccountManager(@NonNull GemsEconomy plugin) {
        this.plugin = plugin;
        this.accounts = CacheBuilder
            .newBuilder()
            .expireAfterAccess(1, TimeUnit.MINUTES)
            .build(CacheLoader.from(uuid ->
                plugin.getDataStore().loadAccount(uuid) // This might return null
            ));
    }

    /**
     * Creates, saves, and caches an Account.
     * <p>
     * If the Account with specific name is already loaded in memory or exists in database, this method will simply
     * do nothing.
     * <p>
     * This method will try the best to create a new Account with an uuid being generated by the <b>Mojang offline
     * method</b>. That is, the uuid of the created Account <b>WILL NOT</b> be the Mojang online version even if the
     * nickname does map to an online Minecraft account. The existence of this method is for the compatibility with
     * other plugins which need to create economy Accounts with the plain string name being the Account identifier.
     *
     * @param nickname the nickname of the new Account
     *
     * @see OfflineModeProfiles
     */
    public synchronized void createAccount(@NonNull String nickname) {
        if (hasAccount(nickname))
            return;

        // Get the UUID of the name by using the Mojang offline player method
        // so that we can ensure same nicknames always point to the same UUID.
        UUID uniqueId = OfflineModeProfiles.getUniqueId(nickname);

        // Not found in cache or database - create new one
        Account account = new Account(uniqueId, nickname);

        // Let's set default balance for this new Account
        plugin.getCurrencyManager().getCurrencies().forEach(currency ->
            account.setBalance(currency, currency.getDefaultBalance())
        );

        cacheAccount(account); // Cache it

        plugin.getDataStore().createAccount(account); // Save it to database

        plugin.getUpdateForwarder().sendMessage(Action.UPDATE_ACCOUNT, account.getUuid());
    }

    /**
     * Creates, saves, and caches an Account.
     * <p>
     * If the Account with specific name is already loaded in memory or exists in database, this method will simply
     * do nothing.
     *
     * @param player the player who owns the new Account
     */
    public synchronized void createAccount(@NonNull OfflinePlayer player) {
        if (hasAccount(player))
            return;

        // Not found in cache or database - create new one
        Account account = new Account(player.getUniqueId(), player.getName());

        // Let's set default balance for this new Account
        plugin.getCurrencyManager().getCurrencies().forEach(currency ->
            account.setBalance(currency, currency.getDefaultBalance())
        );

        cacheAccount(account); // Cache it

        plugin.getDataStore().createAccount(account); // Save it to database

        plugin.getUpdateForwarder().sendMessage(Action.UPDATE_ACCOUNT, account.getUuid());
    }

    /**
     * Creates, saves, and caches an Account.
     * <p>
     * If the Account with specific uuid is already loaded in memory or exists in database, this method will simply
     * do nothing.
     *
     * @param uuid the uuid of the new Account
     */
    public synchronized void createAccount(@NonNull UUID uuid) {
        if (hasAccount(uuid))
            return;

        // Not found in cache or database - create new one
        Account account = new Account(uuid, null);

        // Let's set default balance for this new Account
        plugin.getCurrencyManager().getCurrencies().forEach(currency ->
            account.setBalance(currency, currency.getDefaultBalance())
        );

        cacheAccount(account); // Cache it

        plugin.getDataStore().createAccount(account); // Save it to database

        plugin.getUpdateForwarder().sendMessage(Action.UPDATE_ACCOUNT, account.getUuid());
    }

    /**
     * Deletes specific Account from both cache and database.
     *
     * @param uuid the uuid of specific Account
     */
    public void deleteAccount(@NonNull UUID uuid) {
        accounts.invalidate(uuid); // Delete from memory
        plugin.getDataStore().deleteAccount(uuid); // Delete from database
    }

    /**
     * Deletes specific Account from both cache and database.
     *
     * @param player the owner of specific Account
     */
    public void deleteAccount(@NonNull OfflinePlayer player) {
        accounts.invalidate(player.getUniqueId()); // Delete from memory
        plugin.getDataStore().deleteAccount(player.getUniqueId()); // Delete from database
    }

    /**
     * @see #hasAccount(UUID)
     */
    public boolean hasAccount(@NonNull OfflinePlayer player) {
        return hasAccount(player.getUniqueId());
    }

    /**
     * Checks whether the Account with given uuid exists.
     * <p>
     * This method is equivalent to simply call:
     *
     * <pre>{@code fetchAccount(uuid) != null}</pre>
     *
     * @param uuid the uuid of the Account
     *
     * @return true if the Account with given uuid exists; otherwise false
     */
    public boolean hasAccount(@NonNull UUID uuid) {
        return fetchAccount(uuid) != null;
    }

    /**
     * Checks whether the Account with given name exists.
     * <p>
     * This method is equivalent to simply call:
     *
     * <pre>{@code fetchAccount(name) != null}</pre>
     *
     * @param name the name of the Account
     *
     * @return true if the Account with given name exists; otherwise false
     */
    public boolean hasAccount(@NonNull String name) {
        return fetchAccount(name) != null;
    }

    /**
     * @see #fetchAccount(UUID)
     */
    public @Nullable Account fetchAccount(@NonNull OfflinePlayer player) {
        return fetchAccount(player.getUniqueId());
    }

    /**
     * Fetch an Account with given uuid.
     * <p>
     * This will first get the Account from cache, followed by database. If neither have the Account, it will return
     * null.
     * <p>
     * This will also cache the fetched Account if it exists in database.
     *
     * @param uuid the uuid of the Account to fetch for
     *
     * @return an Account with given uuid
     */
    public @Nullable Account fetchAccount(@NonNull UUID uuid) {
        return accounts.getUnchecked(uuid);
    }

    /**
     * Fetch an Account with given name.
     * <p>
     * This will first get the Account from cache, followed by database. If neither have the Account, it will return
     * null.
     * <p>
     * This will also cache the fetched Account if it exists in database.
     *
     * @param name the name of the Account to fetch for
     *
     * @return an Account with given name
     */
    public @Nullable Account fetchAccount(@NonNull String name) {
        for (final Account account : accounts.asMap().values()) {
            if (name.equalsIgnoreCase(account.getNickname()))
                return account;
        }
        Account account = plugin.getDataStore().loadAccount(name);
        if (account == null)
            return null;
        else
            cacheAccount(account);
        return account;
    }

    /**
     * Caches an Account.
     * <p>
     * If the Account is already cached, this method will override the original.
     *
     * @param account the Account to be loaded into memory
     */
    public void cacheAccount(@NonNull Account account) {
        accounts.put(account.getUuid(), account);
    }

    /**
     * Loads a new object for specific Account from database.
     *
     * @param uuid the uuid of the Account
     */
    public void refreshAccount(@NonNull UUID uuid) {
        accounts.refresh(uuid);
    }

    /**
     * Discards specific Account object from memory.
     *
     * @param uuid the uuid of the Account
     */
    public void flushAccount(@NonNull UUID uuid) {
        accounts.invalidate(uuid);
    }

    /**
     * Discards all Account objects from memory.
     */
    public void flushAccounts() {
        accounts.invalidateAll();
    }

    /**
     * Returns a view of all the Accounts that are currently loaded in memory.
     *
     * @return a view of all the Accounts loaded in memory
     */
    public @NonNull Collection<Account> getCachedAccounts() {
        return accounts.asMap().values();
    }

    /**
     * It's simply a wrapper of {@link DataStorage#getOfflineAccounts()}.
     */
    public @NonNull Collection<Account> getOfflineAccounts() {
        return plugin.getDataStore().getOfflineAccounts();
    }

    @Deprecated
    public @Nullable Account getAccount(@NonNull Player player) {
        return fetchAccount(player.getUniqueId());
    }

    @Deprecated
    public @Nullable Account getAccount(@NonNull OfflinePlayer player) {
        return fetchAccount(player.getUniqueId());
    }

    @Deprecated
    public @Nullable Account getAccount(@NonNull UUID uuid) {
        return fetchAccount(uuid);
    }

    @Deprecated
    public @Nullable Account getAccount(@NonNull String name) {
        return fetchAccount(name);
    }

}

